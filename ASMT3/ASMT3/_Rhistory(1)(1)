setwd("U:/stat475/ASMT3")
knitr::opts_chunk$set(echo = TRUE)
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=placekick)
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=Placekick)
placekick <- read.csv("Placekick.csv")
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=placekick)
mod.fit2 <- glm(formula=good ~ distance, family=binomial(link=logit), data=placekick)
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x)), col = "red", xlim = c(20, 50))
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(20, 50))
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(15, 50))
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(15, 60))
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(15, 70))
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(10, 70))
curve(expr = predict(mod.fit2, newdata = data.frame(distance = x), type = "response"), col = "blue", xlim = c(10, 70), add = TRUE)
placekick <- read.csv("Placekick.csv")
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=placekick)
mod.fit2 <- glm(formula=good ~ distance, family=binomial(link=logit), data=placekick)
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(10, 70))
curve(expr = predict(mod.fit2, newdata = data.frame(distance = x), type = "response"), col = "blue", xlim = c(10, 70), add = TRUE)
placekick <- read.csv("Placekick.csv")
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=placekick)
mod.fit2 <- glm(formula=good ~ distance, family=binomial(link=logit), data=placekick)
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x)), col = "red", xlim = c(10, 70))
curve(expr = predict(mod.fit2, newdata = data.frame(distance = x)), col = "blue", xlim = c(10, 70), add = TRUE)
placekick <- read.csv("Placekick.csv")
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=placekick)
mod.fit2 <- glm(formula=good ~ distance, family=binomial(link=logit), data=placekick)
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(10, 70))
curve(expr = predict(mod.fit2, newdata = data.frame(distance = x), type = "response"), col = "blue", xlim = c(10, 70), add = TRUE)
placekick <- read.csv("Placekick.csv")
mod.fit1 <- glm(formula=good ~ distance + I(distance^2),
family=binomial(link=logit), data=placekick)
mod.fit2 <- glm(formula=good ~ distance, family=binomial(link=logit), data=placekick)
curve(expr = predict(mod.fit1, newdata = data.frame(distance = x),type = "response"), col = "red", xlim = c(10, 70))
curve(expr = predict(mod.fit2, newdata = data.frame(distance = x), type = "response"), col = "blue", xlim = c(10, 70), add = TRUE)
knitr::opts_chunk$set(echo = TRUE)
challenger <- read.csv("Challenger.csv")
knitr::opts_chunk$set(echo = TRUE)
challenger <- read.csv('U:/stat475/assignment2/challenger.csv')
mod.fit <- glm(formula=O.ring/Number ~ Temp, family=binomial(link = logit), weights = Number, data=challenger)
mod.fit
library(dplyr)
challenger <- mutate(challenger, proportion = O.ring/Number)
plot(x=challenger$Temp, y=challenger$proportion,
main="Proportions of made challengers with Wilcon CIs",
xlab="Temp", ylab="Proportion of successes")
# At each Temp, compute score confidence interval for prob of success
#  Do this by creating a function that computes the score interval on one row
#  and apply the funciton to each row (MARGIN=1) of the challenger data frame.
library(package = binom)
install.packages("binom")
knitr::opts_chunk$set(echo = TRUE)
challenger <- read.csv('U:/stat475/assignment2/challenger.csv')
mod.fit <- glm(formula=O.ring/Number ~ Temp, family=binomial(link = logit), weights = Number, data=challenger)
mod.fit
library(dplyr)
challenger <- mutate(challenger, proportion = O.ring/Number)
plot(x=challenger$Temp, y=challenger$proportion,
main="Proportions of made challengers with Wilcon CIs",
xlab="Temp", ylab="Proportion of successes")
# At each Temp, compute score confidence interval for prob of success
#  Do this by creating a function that computes the score interval on one row
#  and apply the funciton to each row (MARGIN=1) of the challenger data frame.
library(package = binom)
wilson <- function(x){
binom.confint(x = x[4], n = x[5], conf.level = 0.95, methods = "wilson")
}
dist.ci <- apply(X=challenger, MARGIN=1, FUN=wilson)
# Have to do some gymnastics to get out the endpoints.
#  apply() created a list of results, so unlist them into matrix form
#  and add them to our data frame
dist.ci1 <- matrix(data=unlist(dist.ci), byrow = TRUE,  nrow = nrow(challenger))
challenger <- data.frame(challenger, lower=dist.ci1[,5], upper=dist.ci1[,6])
# Now add each line to the plot in the same way.  segments() can draw a line
#   segment on an existing plot from (x0,y0) to (x1,y1).
#   Can omit one x or y if it remains constant, as here we want vertical lines.
ci.lines <- function(x){segments(x0=x[2], y0=x[7], y1=x[8], col=grey(.7))}
apply(X=challenger, MARGIN=1, FUN=ci.lines)
# Add fitted logistic regression curve
# curve() evaluates a function at various points of a generically named variable x.
curve(expr = predict(object = mod.fit, newdata = data.frame(Temp = x), type = "response"), col = "red", add = TRUE,
xlim = c(0, 90))
pred <- function(Temp) {
df <- data.frame(Temp = Temp)
log_odds <- predict(mod.fit, newdata = df)
exp(log_odds)/(exp(log_odds)+1)
}
data.frame(Temp=c(81, 61, 31), probability = c(pred(81), pred(61), pred(31)))
range(challenger$Temp)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
challenger <- read.csv('U:/stat475/assignment2/challenger.csv')
mod.fit <- glm(formula=O.ring/Number ~ Temp, family=binomial(link = logit), weights = Number, data=challenger)
challenger <- mutate(challenger, proportion = O.ring/Number)
plot(x=challenger$Temp, y=challenger$proportion,
main="Proportions of made challengers with Wilcon CIs",
xlab="Temp", ylab="Proportion of successes")
library(package = binom)
wilson <- function(x){
binom.confint(x = x[4], n = x[5], conf.level = 0.95, methods = "wilson")
}
dist.ci <- apply(X=challenger, MARGIN=1, FUN=wilson)
dist.ci1 <- matrix(data=unlist(dist.ci), byrow = TRUE,  nrow = nrow(challenger))
challenger <- data.frame(challenger, lower=dist.ci1[,5], upper=dist.ci1[,6])
ci.lines <- function(x){segments(x0=x[2], y0=x[7], y1=x[8], col=grey(.7))}
apply(X=challenger, MARGIN=1, FUN=ci.lines)
curve(expr = predict(object = mod.fit, newdata = data.frame(Temp = x), type = "response"), col = "red", add = TRUE,
xlim = c(0, 90))
library(package = mcprofile)
install.packages("mcprofile")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
challenger <- read.csv('U:/stat475/assignment2/challenger.csv')
mod.fit <- glm(formula=O.ring/Number ~ Temp, family=binomial(link = logit), weights = Number, data=challenger)
challenger <- mutate(challenger, proportion = O.ring/Number)
plot(x=challenger$Temp, y=challenger$proportion,
main="Proportions of made challengers with Wilcon CIs",
xlab="Temp", ylab="Proportion of successes")
library(package = binom)
wilson <- function(x){
binom.confint(x = x[4], n = x[5], conf.level = 0.95, methods = "wilson")
}
dist.ci <- apply(X=challenger, MARGIN=1, FUN=wilson)
dist.ci1 <- matrix(data=unlist(dist.ci), byrow = TRUE,  nrow = nrow(challenger))
challenger <- data.frame(challenger, lower=dist.ci1[,5], upper=dist.ci1[,6])
ci.lines <- function(x){segments(x0=x[2], y0=x[7], y1=x[8], col=grey(.7))}
apply(X=challenger, MARGIN=1, FUN=ci.lines)
curve(expr = predict(object = mod.fit, newdata = data.frame(Temp = x), type = "response"), col = "red", add = TRUE,
xlim = c(0, 90))
library(package = mcprofile)
# Create the coefficient matrix for the parameters in the
#   linear predictor
all.temp=data.frame(Temp=c(53:81))
K <- as.matrix(cbind(1,all.temp))
class(K)  # matrix
# Use the mcprofile(object=, CM=, ...) function to find profile
#   likelihood values.
# Can take a little time in complex models.
profiles <- mcprofile(object=mod.fit, CM=K)
# There is a confint() method developed specifically for objects
#   produced by mcprofile().  "adjust=" allows you to use methods
#   to control simultaneous coverage probabilities, like Bonferroni
ci.logit.LR <- confint(object=profiles, level=0.95, adjust = "none")
# CI for beta_0 + beta_1 * x
ci.pi.LR <- exp(ci.logit.LR$confint)/(1 + exp(ci.logit.LR$confint))
# Show these as bands on our plot
lines(x = all.temp[,1], y = ci.pi.LR[,1], col = "blue")
lines(x = all.temp[,1], y = ci.pi.LR[,2], col = "blue")
pred <- predict(mod.fit, data.frame(Temp = 31), "response", se.fit = TRUE)
pred
critval <- 1.96 ## approx 95% CI
upr <- pred$fit + (critval * pred$se.fit)
lwr <- pred$fit - (critval * pred$se.fit)
data.frame(lower = lwr, upper = upr)
fit1 <- glm(O.ring/Number ~ Temp, weight = Number, family = binomial(link = "logit"),data = challenger)
fit.2 <- glm(O.ring/Number ~ Temp, weights = Number, family = binomial(link = "logit"), data = challenger)
anova(fit1, fit2)
fit.1 <- glm(O.ring/Number ~ Temp, weight = Number, family = binomial(link = "logit"),data = challenger)
fit.2 <- glm(O.ring/Number ~ Temp, weights = Number, family = binomial(link = "logit"), data = challenger)
anova(fit.1, fit.2)
challenger <- read.csv("Challenger.csv")
fit.1 <- glm(O.ring/Number ~ Temp, weight = Number, family = binomial(link = "logit"),data = challenger)
fit.2 <- glm(O.ring/Number ~ Temp + I(Temp^2), weights = Number, family = binomial(link = "logit"), data = challenger)
anova(fit.1, fit.2)
Anova(fit.1, fit.2)
install.packages("car")
library(car)
fit.1 <- glm(O.ring/Number ~ Temp, weight = Number, family = binomial(link = "logit"),data = challenger)
fit.2 <- glm(O.ring/Number ~ Temp + I(Temp^2), weights = Number, family = binomial(link = "logit"), data = challenger)
Anova(fit.1, fit.2)
Anova(fit.1, fit.2)
anova(fit.2, fit.1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
placekick <- read.csv("U:/stat475/assignment2/Placekick.csv")
placekick <- mutate(placekick, week = as.factor(week), change = as.factor(change), PAT = as.factor(PAT), type = as.factor(type), field = as.factor(field), wind = as.factor(wind))
k.fit <- glm(good ~ ., family = binomial(link = logit), data = placekick)
summary(k.fit)
library(car)
k.fit2 <- glm(good ~ distance, family = binomial(link = logit), data = placekick)
anova(k.fit, k.fit2, test = "LR")
Anova(k.fit)
anova(fit.2, fit.1, test = "LR")
Anova(fit.2, fit.1, test = "LR")
Anova(fit.2, fit.1, test = "LR")
anova(fit.2, fit.1, test = "LR")
anova(fit.1, fit.2, test = "LR")
anova(fit.2, fit.1, test = "LR")
knitr::opts_chunk$set(echo = TRUE)
placekick <- read.csv("Placekick.csv")
typeof(placekick$field)
range(placekick$field)
placekick <- transform(placekick, field = as.factor(field))
mod.fit <- glm(good ~ distance + field, family = binomial(link = "logit"), data = placekick)
beta.hat <- coef(mod.fit.int)[-1]
beta.hat <- coef(mod.fit)[-1]
all.dist <- seq(from = 20, to = 60, by = 10)
OR.wind <- exp(beta.hat[2] + beta.hat[3]*all.dist)
round(cbind(all.dist, OR.wind), digits=2)
Anova(mod.fit, test = "LR")
placekick <- read.csv("Placekick.csv")
typeof(placekick$field)
placekick <- transform(placekick, field = as.factor(field))
mod.fit <- glm(good ~ distance + field, family = binomial(link = "logit"), data = placekick)
Anova(mod.fit, test = "LR")
c <- -10   # 10-yard decrease
beta.hat <- coef(mod.fit)[-1]
beta.hat
beta.hat <- coef(mod.fit)[-1]
all.dist <- seq(from = 20, to = 60, by = 10)
OR.wind <- exp(beta.hat[1]*all.dist + beta.hat[2])
OR.wind
beta.hat <- coef(mod.fit)[-1]
all.dist <- seq(from = 20, to = 60, by = 10)
OR.field <- exp(beta.hat[1]*all.dist + beta.hat[2])
round(cbind(all.dist, OR.field), digits=2)
beta.hat <- coef(mod.fit)[-1]
all.dist <- seq(from = 20, to = 60, by = 10)
OR.field <- exp(beta.hat[1]*all.dist + beta.hat[2])
round(cbind(all.dist, OR.field), digits=2)
